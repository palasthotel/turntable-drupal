<?php
// FIXME
ini_set('display_errors', TRUE);

require_once './sites/all/libraries/turntable/turntable_client.php';
require_once './sites/all/libraries/turntable/core/http.php';

function turntable_client_menu() {
  $items['admin/config/turntable-client'] = array(
    'title' => t('Turntable Client'),
    'description' => t(
        'Synchronize content between various Drupal installations'),
    'position' => 'right',
    'weight' => -5,
    'page callback' => 'system_admin_menu_block_page',
    'access arguments' => array(
      'administer site configuration'
    ),
    'file' => 'system.admin.inc',
    'file path' => drupal_get_path('module', 'system')
  );

  $items['admin/config/turntable-client/settings'] = array(
    'title' => t('Turntable Client Settings'),
    'description' => t('Change how Turntable Client behaves.'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array(
      'turntable_client_admin_settings'
    ),
    'access arguments' => array(
      'administer site configuration'
    ),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'turntable_client.settings.php'
  );

  $items['node/%/turntable'] = array(
    'title' => t('Turntable'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array(
      'turntable_client_shared_state_settings'
    ),
    'access arguments' => array(
      'administer content'
    ),
    'type' => MENU_LOCAL_TASK,
    'file' => 'turntable_client.module'
  );

  // search form
  $items['admin/content/turntable-search'] = array(
    'title' => t('Turntable Search'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array(
      'turntable_client_content_search'
    ),
    'access arguments' => array(
      'administer content'
    ),
    'type' => MENU_LOCAL_TASK,
    'file' => 'turntable_client.search.php'
  );

  return $items;
}

/**
 * Delete shared node settings when the corresponding local node is deleted.
 *
 * @param node $node
 */
function turntable_client_node_delete($node) {
  $db = turntable_client::getInstance()->getDB();

  $db->deleteSharedNode($node->nid);
}

function turntable_client_admin_paths_alter(&$paths) {
  $paths['node/*/turntable'] = TRUE;
  $paths['admin/content/turntable-search'] = TRUE;
}

function get_node_id() {
  if (!is_numeric(arg(1))) {
    return -1;
  }

  // return the node's id
  return (int) arg(1);
}

function turntable_client_shared_state_settings() {
  $nid = get_node_id();

  $shared_state = turntable_client::getInstance()->getDB()->getSharedState($nid);

  if ($shared_state == turntable_client::SHARED_COPY ||
       $shared_state == turntable_client::SHARED_REF) {
    $form['turntable_client_shared_states'] = array(
      '#type' => 'value',
      '#value' => array(
        turntable_client::SHARED_COPY => t('Copy'),
        turntable_client::SHARED_REF => t('Reference')
      )
    );

    $form['turntable_client_shared_state'] = array(
      '#type' => 'select',
      '#title' => t('Shared state'),
      '#description' => t(
          'Determines if the local node is a copy of a node on the master or a reference that gets updated on remote changes (local changes will be overwritten)'),
      '#options' => $form['turntable_client_shared_states']['#value'],
      '#default_value' => $shared_state
    );
  } else {
    // determine if the node is shared
    $is_shared = $shared_state == turntable_client::SHARED_ORIG;

    $form['turntable_client_shared_state'] = array(
      '#type' => 'checkbox',
      '#title' => t('Share this node'),
      '#description' => t(
          'Determines if the local node is being shared with the master.'),
      '#default_value' => $is_shared
    );
  }

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Save')
  );

  return $form;
}

function turntable_client_shared_state_settings_submit(&$form, &$form_state) {
  $form_state['rebuild'] = TRUE;

  // get the node's id
  $nid = get_node_id();

  if ($nid == -1) {
    return;
  }

  // get the type of the control element
  $form_type = $form_state['complete form']['turntable_client_shared_state']['#type'];

  // handle checkbox
  if ($form_type == 'checkbox') {
    if ($form_state['values']['turntable_client_shared_state']) {
      $shared_state = turntable_client::SHARED_ORIG;
    } else {
      $shared_state = turntable_client::SHARED_NONE;
    }
  } elseif ($form_state['values']['turntable_client_shared_state']) { // handle dropdown
    $sel = (int) $form_state['values']['turntable_client_shared_state'];
    if ($sel == 0) {
      $shared_state = turntable_client::SHARED_COPY;
    } else {
      $shared_state = turntable_client::SHARED_REF;
    }
  } else {
    drupal_set_message(t('Invalid form.'), 'error');
    return;
  }

  $turntable_client = turntable_client::getInstance();
  // set the shared state
  $turntable_client->getDB()->setSharedState($nid, $shared_state);

  // post to master if it is the original
  if ($shared_state === turntable_client::SHARED_ORIG) {
    $node = node_load($nid);
    send_shared_node($turntable_client, $node);
  }
}

function turntable_client_node_presave($node) {
  $turntable_client = turntable_client::getInstance();

  // skip if this node is all new
  if (!isset($node->nid)) {
    return;
  }

  $shared_state = (int) $turntable_client->getDB()->getSharedState($node->nid);

  if ($shared_state === turntable_client::SHARED_ORIG) {
    send_shared_node($turntable_client, $node);
  }
}

function send_shared_node($turntable_client, $node) {
  global $base_url;
  global $user;

  $turntable_client = turntable_client::getInstance();
  $turntable_client->setMasterURL(variable_get('turntable_client_master_url'));
  $turntable_client->setClientID($base_url);

  $shared_node = array();

  // set data
  $shared_node['title'] = $node->title;
  $shared_node['body'] = $node->body[$node->language][0]['value'];
  $shared_node['language'] = $node->language;

  // set metadata
  $shared_node['node_id'] = $node->nid;
  $shared_node['revision_uid'] = $node->revision_uid;
  $shared_node['content_type'] = $node->type;
  $shared_node['user_name'] = $user->name;
  $shared_node['author_name'] = $node->name;
  $shared_node['last_sync'] = date('c');
  $shared_node['complete_content'] = json_encode($node);

  $response = $turntable_client->sendSharedNode($shared_node);

  // show errors
  if (!$response) {
    drupal_set_message(t('Turntable Master could not process your request.'),
        'warning');
    return;
  } else {
    $decoded = json_decode($response);
    if (!$decoded[0]) {
      drupal_set_message(t('Turntable Master did not accept your request.'),
          'warning');
      return;
    }
  }

  drupal_set_message(t('Settings saved.'));
}

function turntable_client_cron() {
  global $base_url;

  $turntable_client = turntable_client::getInstance();
  $turntable_client->setMasterURL(variable_get('turntable_client_master_url'));
  $turntable_client->setClientID($base_url);
  $db = $turntable_client->getDB();

  foreach ($db->getSharedStates() as $shared) {
    $shared_node = $turntable_client->getSharedNode($shared['master_node_id']);

    $local_time = strtotime($shared['last_sync']);
    $remote_time = DateTime::createFromFormat(DateTime::ISO8601,
        $shared_node->last_sync)->getTimestamp();

    if ($remote_time > $local_time) {
      // update last sync (locally)
      $db->setSharedLastSync($shared['nid'], $remote_time);

      // load the node
      $local_node = node_load($shared['nid']);

      $ewrapper = entity_metadata_wrapper('node', $local_node);

      // update and store the node
      $ewrapper->title->set($shared_node->title);

      // body
      $ewrapper->body->set(array(
        'value' => $shared_node->body
      ));

      // save node
      $ewrapper->save();
    }
  }
}

