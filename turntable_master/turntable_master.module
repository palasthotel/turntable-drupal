<?php
require_once './sites/all/libraries/turntable/turntable_master.php';
require_once './sites/all/libraries/turntable/drupal/admin_view.php';

$db = turntable_master::getInstance()->getDB();

function turntable_master_menu() {
  $items['admin/config/turntable-master'] = array(
    'title' => t('Turntable Master'),
    'description' => t(
        'Synchronize content between various Drupal installations'),
    'position' => 'right',
    'weight' => -5,
    'page callback' => 'system_admin_menu_block_page',
    'access arguments' => array(
      'administer site configuration'
    ),
    'file' => 'system.admin.inc',
    'file path' => drupal_get_path('module', 'system')
  );

  $items['admin/config/turntable-master/settings'] = array(
    'title' => t('Turntable Master Settings'),
    'description' => t('Change how Turntable Master behaves.'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array(
      'turntable_master_admin_settings'
    ),
    'access arguments' => array(
      'administer site configuration'
    ),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'turntable_master.settings.php'
  );

  return $items;
}

function turntable_master_node_delete($node) {
  $db = turntable_master::getInstance()->getDB();

  $db->deleteSharedNode($node->nid);
}

/**
 * @file
 *
 * Resource (API) definitions.
 */

/**
 * Implements hook_services_resources().
 */
function turntable_master_services_resources() {
  return array(
    'node-shared' => array(
      'retrieve' => array(
        'help' => t('Gets a single shared node by its ID'),
        'file' => array(
          'file' => 'service.php',
          'module' => 'turntable_master'
        ),
        'callback' => 'turntable_master_get_shared_node',
        'args' => array(
          array(
            'name' => 'id',
            'type' => 'int',
            'description' => 'Shared node ID',
            'source' => array(
              'path' => '0'
            ),
            'optional' => FALSE
          )
        ),
        'access callback' => 'turntable_master_access',
        'access arguments' => array(
          'read'
        ),
        'access arguments append' => TRUE
      ),
      'create' => array(
        'help' => t('Saves a (possibly new) shared node'),
        'file' => array(
          'file' => 'service.php',
          'module' => 'turntable_master'
        ),
        'callback' => 'turntable_master_save_shared_node',
        'args' => array(
          array(
            'name' => 'data',
            'type' => 'struct',
            'description' => 'The shared node object',
            'source' => 'data',
            'optional' => FALSE
          )
        ),
        'access callback' => 'turntable_master_access',
        'access arguments' => array(
          'save'
        ),
        'access arguments append' => TRUE
      ),
      'index' => array(
        'help' => t('Retrieves a list of shared nodes'),
        'file' => array(
          'file' => 'service.php',
          'module' => 'turntable_master'
        ),
        'callback' => 'turntable_master_find_shared_node',
        'args' => array(
          array(
            'name' => 'query',
            'type' => 'string',
            'description' => 'Search query',
            'source' => array(
              'param' => 'query'
            ),
            'optional' => FALSE
          )
        ),
        'access callback' => 'turntable_master_access',
        'access arguments' => array(
          'read'
        ),
        'access arguments append' => TRUE
      )
    ),
    'image' => array(
      'index' => array( // why do I need index? is this a bug?
        'help' => t('Gets an image from a client'),
        'file' => array(
          'file' => 'service.php',
          'module' => 'turntable_master'
        ),
        'callback' => 'turntable_master_get_image',
        'args' => array(
          array(
            'name' => 'url',
            'type' => 'string',
            'description' => 'Image URL',
            'source' => array(
              'param' => 'url'
            ),
            'optional' => FALSE
          )
        ),
        'access callback' => 'turntable_master_access',
        'access arguments' => array(
          'read'
        ),
        'access arguments append' => TRUE
      )
    )
  );
}

/**
 * Endpoint definition.
 */
function turntable_master_default_services_endpoint() {
  $endpoints = array();

  $endpoint = new stdClass();
  $endpoint->disabled = FALSE; // Edit this to TRUE to make a default endpoint disabled initially
  $endpoint->api_version = 3;
  $endpoint->name = 'turntable_master_v1';
  $endpoint->server = 'rest_server';
  $endpoint->path = 'api/turntable/v1';
  $endpoint->authentication = array();

  // server settings
  $endpoint->server_settings = array(
    'formatters' => array(
      'json' => TRUE,
      'bencode' => FALSE,
      'jsonp' => FALSE,
      'php' => FALSE,
      'xml' => FALSE
    ),
    'parsers' => array(
      'application/json' => TRUE,
      'application/vnd.php.serialized' => FALSE,
      'application/x-www-form-urlencoded' => FALSE,
      'application/xml' => FALSE,
      'multipart/form-data' => FALSE,
      'text/xml' => FALSE
    )
  );

  // resource definitions
  $endpoint->resources = array(
    'node-shared' => array(
      'operations' => array(
        'create' => array(
          'enabled' => '1'
        ),
        'retrieve' => array(
          'enabled' => '1'
        )
      )
    ),
    // images are readable
    'image' => array(
      'operations' => array(
        'retrieve' => array(
          'enabled' => '1'
        )
      )
    )
  );

  // debug mode enabled
  $endpoint->debug = 1;

  $endpoints[] = $endpoint;

  return $endpoints;
}

function turntable_master_access($op, $args) {
  // grant access without authentication/authorization
  // access for everyone
  // FIXME big security flaw
  return TRUE;
}

function turntable_master_cron() {
  $image_dir = 'public://turntable/';

  if (!file_exists($image_dir)) {
    return;
  }

  // remove image files
  $handle = opendir($image_dir);
  while (($file = readdir($handle)) !== FALSE) {
    $file_uri = $image_dir . $file;
    if (is_file($file_uri)) {
      unlink($file_uri);
    }
  }

  closedir($handle);
}

/**
 * Implements hook_views_api().
 */
function turntable_client_views_api() {
  return array(
    'api' => 3.0,
    'path' => drupal_get_path('module', 'turntable_master') . '/views'
  );
}
